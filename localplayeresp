-- Function to format numbers
function format_number(number)
    local suffixes = {"", "K", "M", "B", "T", "QD"}
    local suffix_index = 1

    while math.abs(number) >= 1000 and suffix_index < #suffixes do
        number = number / 1000.0
        suffix_index = suffix_index + 1
    end

    return string.format("%.2f%s", number, suffixes[suffix_index])
end

local player = game:GetService("Players").LocalPlayer

-- Create a highlight and store it in ReplicatedStorage
local highlightTemplate = Instance.new("Highlight")
highlightTemplate.FillColor = Color3.new(1, 0, 0) -- Starting color (red)
highlightTemplate.OutlineColor = Color3.new(0, 0, 0) -- Outline color (black)
highlightTemplate.Name = "PlayerHighlight"
highlightTemplate.Parent = game:GetService("ReplicatedStorage")

-- Function to create or update the GUI
local function createGUI(character)
    -- Wait for the character's Head to be available
    local head = character:WaitForChild("Head")

    -- Create a BillboardGui for the display name and stats
    local billboardGui = head:FindFirstChild("BillboardGui") or Instance.new("BillboardGui")
    billboardGui.Parent = head
    billboardGui.Size = UDim2.new(0, 200, 0, 50) -- Size of the GUI
    billboardGui.StudsOffset = Vector3.new(0, 2, 0) -- Position above the head
    billboardGui.Adornee = head -- Set the object it will be attached to
    billboardGui.AlwaysOnTop = true -- Keep it always on top

    -- Create or reuse the TextLabel
    local usernameLabel = billboardGui:FindFirstChild("UsernameLabel") or Instance.new("TextLabel")
    usernameLabel.Name = "UsernameLabel" -- Set name for easy reference
    usernameLabel.Parent = billboardGui
    usernameLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the BillboardGui
    usernameLabel.BackgroundTransparency = 1 -- Make background transparent
    usernameLabel.TextColor3 = Color3.new(1, 1, 1) -- Initial text color (white)
    usernameLabel.TextScaled = false -- Disable scaling to set a fixed size
    usernameLabel.TextSize = 20 -- Set the desired text size (adjust as needed)
    usernameLabel.TextWrapped = false -- Ensure the text stays on one line

    -- Fetch player stats from ReplicatedStorage
    local playerStats = game:GetService("ReplicatedStorage"):FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))
    local ownerTag = ""
    local totalStats = math.huge -- Start with the highest possible value
    local rebirths = 0 -- Default rebirths

    if playerStats then
        -- Fetch the various stats
        local strengthStat = playerStats:FindFirstChild("Strength") and playerStats.Strength.Value or math.huge
        local defenceStat = playerStats:FindFirstChild("Defense") and playerStats.Defense.Value or math.huge
        local energyStat = playerStats:FindFirstChild("Energy") and playerStats.Energy.Value or math.huge
        local speedStat = playerStats:FindFirstChild("Speed") and playerStats.Speed.Value or math.huge

        -- Calculate the lowest stat
        totalStats = math.min(strengthStat, defenceStat, energyStat, speedStat)

        -- Fetch rebirths
        rebirths = playerStats:FindFirstChild("Rebirths") and playerStats.Rebirths.Value or 0

        -- Add "Owner" tag if the player is one of the specified usernames
        if player.Name == "Steve72009" or player.Name == "Pserson2" or player.Name == "whowhatwhen1230" then
            ownerTag = " || Script Creator"
            usernameLabel.Font = Enum.Font.SpecialElite -- Change font to Special Elite
        else
            usernameLabel.Font = Enum.Font.Cartoon -- Default font for other players
        end

        -- Format the display name and total stats with the rebirths and owner tag
        usernameLabel.Text = string.format("%s || %s, %d%s", player.DisplayName, format_number(totalStats), rebirths, ownerTag)
    else
        usernameLabel.Text = player.DisplayName -- Fallback if stats not found
    end

    usernameLabel.TextStrokeTransparency = .01

    -- Change outline color based on total stats
    local outlineColor
    if totalStats >= 1e11 then
        outlineColor = Color3.fromRGB(255, 105, 180) -- Hot Pink
    elseif totalStats >= 1e10 then
        outlineColor = Color3.fromRGB(165, 105, 189) -- Cyan
    elseif totalStats >= 1e9 then
        outlineColor = Color3.fromRGB(169, 204, 227) -- Dark Blue
    elseif totalStats >= 1e8 then
        outlineColor = Color3.fromRGB(255, 215, 0) -- Gold
    elseif totalStats >= 1e7 then
        outlineColor = Color3.fromRGB(41, 128, 185) -- Dark Green
    elseif totalStats >= 1e6 then
        outlineColor = Color3.fromRGB(133, 193, 233) -- Light Blue
    else
        outlineColor = Color3.new(171, 235, 198) -- Default color
    end

    -- Update outline color of the username label
    usernameLabel.TextStrokeTransparency = 0.01 -- Reset stroke transparency
    usernameLabel.TextStrokeColor3 = outlineColor -- Set outline color

    -- Create a highlight for the character
    local highlight = highlightTemplate:Clone() -- Clone the template highlight
    highlight.Parent = character -- Parent it to the character

    -- Update stats every 0.2 seconds
    while true do
        -- Fetch player stats from ReplicatedStorage again
        playerStats = game:GetService("ReplicatedStorage"):FindFirstChild("Datas"):FindFirstChild(tostring(player.UserId))

        if playerStats then
            -- Fetch the various stats again
            strengthStat = playerStats:FindFirstChild("Strength") and playerStats.Strength.Value or math.huge
            defenceStat = playerStats:FindFirstChild("Defense") and playerStats.Defense.Value or math.huge
            energyStat = playerStats:FindFirstChild("Energy") and playerStats.Energy.Value or math.huge
            speedStat = playerStats:FindFirstChild("Speed") and playerStats.Speed.Value or math.huge

            -- Calculate the lowest stat again
            totalStats = math.min(strengthStat, defenceStat, energyStat, speedStat)

            -- Fetch rebirths again
            rebirths = playerStats:FindFirstChild("Rebirths") and playerStats.Rebirths.Value or 0

            -- Update the username label with the latest stats
            usernameLabel.Text = string.format("%s || %s, %d%s", player.DisplayName, format_number(totalStats), rebirths, ownerTag)

            -- Change outline color based on updated total stats
            if totalStats >= 1e11 then
                outlineColor = Color3.fromRGB(255, 105, 180) -- Hot Pink
            elseif totalStats >= 1e10 then
                outlineColor = Color3.fromRGB(192, 57, 43) -- Cyan
            elseif totalStats >= 1e9 then
                outlineColor = Color3.fromRGB(169, 204, 227) -- Dark Blue
            elseif totalStats >= 1e8 then
                outlineColor = Color3.fromRGB(255, 215, 0) -- Gold
            elseif totalStats >= 1e7 then
                outlineColor = Color3.fromRGB(41, 128, 185) -- Dark Green
            elseif totalStats >= 1e6 then
                outlineColor = Color3.fromRGB(133, 193, 233) -- Light Blue
            else
                outlineColor = Color3.new(171, 235, 198) -- Default color
            end

            -- Update outline color of the username label
            usernameLabel.TextStrokeColor3 = outlineColor -- Set outline color
        end

        wait(0.2) -- Wait for 0.2 seconds before the next update
    end
end

-- Function to recreate GUI and highlight
local function onCharacterAdded(character)
    -- Create GUI
    createGUI(character) -- Create the GUI for the new character
end

-- Connect to CharacterAdded to create GUI on respawn
player.CharacterAdded:Connect(onCharacterAdded)

-- Create GUI for the initial character
if player.Character then
    onCharacterAdded(player.Character)
end

-- Anti-AFK GUI
wait(0.5)
local ba = Instance.new("ScreenGui")
local ca = Instance.new("TextLabel")
local da = Instance.new("Frame")
local _b = Instance.new("TextLabel")
local ab = Instance.new("TextLabel")

ba.Parent = game.CoreGui
ba.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ca.Parent = ba
ca.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ca.BackgroundTransparency = 0.5
ca.Position = UDim2.new(0.5, -100, 0.5, -50)
ca.Size = UDim2.new(0, 200, 0, 100)
ca.Font = Enum.Font.SourceSansBold
ca.Text = "Anti-AFK"
ca.TextColor3 = Color3.fromRGB(0, 0, 0)
ca.TextScaled = true
ca.TextWrapped = true
da.Parent = ca
da.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
da.BackgroundTransparency = 1
da.Position = UDim2.new(0, 0, 0, 50)
da.Size = UDim2.new(1, 0, 0, 50)
da.Font = Enum.Font.SourceSans
da.Text = "You will be kicked if you stay idle for too long."
da.TextColor3 = Color3.fromRGB(0, 0, 0)
da.TextScaled = true
da.TextWrapped = true
_b.Parent = da
_b.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
_b.BackgroundTransparency = 1
_b.Position = UDim2.new(0, 0, 1, 0)
_b.Size = UDim2.new(1, 0, 0, 50)
_b.Font = Enum.Font.SourceSans
_b.Text = "Stay active to avoid being kicked."
_b.TextColor3 = Color3.fromRGB(0, 0, 0)
_b.TextScaled = true
_b.TextWrapped = true

local idleTime = 0
game:GetService("RunService").RenderStepped:Connect(function()
    idleTime = idleTime + 0.1
    if idleTime > 10 then
        game.Players.LocalPlayer:Kick("You have been idle for too long!")
    end
end)

game:GetService("UserInputService").InputBegan:Connect(function(input)
    idleTime = 0 -- Reset idle time on any input
end)
